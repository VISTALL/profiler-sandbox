/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.mustbe.consulo.profiler;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-3")
public class TMemoryUsage implements org.apache.thrift.TBase<TMemoryUsage, TMemoryUsage._Fields>, java.io.Serializable, Cloneable, Comparable<TMemoryUsage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMemoryUsage");

  private static final org.apache.thrift.protocol.TField INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("init", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USED_FIELD_DESC = new org.apache.thrift.protocol.TField("used", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("committed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMemoryUsageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMemoryUsageTupleSchemeFactory());
  }

  public long init; // required
  public long used; // required
  public long committed; // required
  public long max; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INIT((short)1, "init"),
    USED((short)2, "used"),
    COMMITTED((short)3, "committed"),
    MAX((short)4, "max");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INIT
          return INIT;
        case 2: // USED
          return USED;
        case 3: // COMMITTED
          return COMMITTED;
        case 4: // MAX
          return MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INIT_ISSET_ID = 0;
  private static final int __USED_ISSET_ID = 1;
  private static final int __COMMITTED_ISSET_ID = 2;
  private static final int __MAX_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INIT, new org.apache.thrift.meta_data.FieldMetaData("init", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USED, new org.apache.thrift.meta_data.FieldMetaData("used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("committed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMemoryUsage.class, metaDataMap);
  }

  public TMemoryUsage() {
  }

  public TMemoryUsage(
    long init,
    long used,
    long committed,
    long max)
  {
    this();
    this.init = init;
    setInitIsSet(true);
    this.used = used;
    setUsedIsSet(true);
    this.committed = committed;
    setCommittedIsSet(true);
    this.max = max;
    setMaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMemoryUsage(TMemoryUsage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.init = other.init;
    this.used = other.used;
    this.committed = other.committed;
    this.max = other.max;
  }

  public TMemoryUsage deepCopy() {
    return new TMemoryUsage(this);
  }

  @Override
  public void clear() {
    setInitIsSet(false);
    this.init = 0;
    setUsedIsSet(false);
    this.used = 0;
    setCommittedIsSet(false);
    this.committed = 0;
    setMaxIsSet(false);
    this.max = 0;
  }

  public long getInit() {
    return this.init;
  }

  public TMemoryUsage setInit(long init) {
    this.init = init;
    setInitIsSet(true);
    return this;
  }

  public void unsetInit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INIT_ISSET_ID);
  }

  /** Returns true if field init is set (has been assigned a value) and false otherwise */
  public boolean isSetInit() {
    return EncodingUtils.testBit(__isset_bitfield, __INIT_ISSET_ID);
  }

  public void setInitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INIT_ISSET_ID, value);
  }

  public long getUsed() {
    return this.used;
  }

  public TMemoryUsage setUsed(long used) {
    this.used = used;
    setUsedIsSet(true);
    return this;
  }

  public void unsetUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USED_ISSET_ID);
  }

  /** Returns true if field used is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __USED_ISSET_ID);
  }

  public void setUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USED_ISSET_ID, value);
  }

  public long getCommitted() {
    return this.committed;
  }

  public TMemoryUsage setCommitted(long committed) {
    this.committed = committed;
    setCommittedIsSet(true);
    return this;
  }

  public void unsetCommitted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITTED_ISSET_ID);
  }

  /** Returns true if field committed is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitted() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMITTED_ISSET_ID);
  }

  public void setCommittedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITTED_ISSET_ID, value);
  }

  public long getMax() {
    return this.max;
  }

  public TMemoryUsage setMax(long max) {
    this.max = max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INIT:
      if (value == null) {
        unsetInit();
      } else {
        setInit((Long)value);
      }
      break;

    case USED:
      if (value == null) {
        unsetUsed();
      } else {
        setUsed((Long)value);
      }
      break;

    case COMMITTED:
      if (value == null) {
        unsetCommitted();
      } else {
        setCommitted((Long)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INIT:
      return Long.valueOf(getInit());

    case USED:
      return Long.valueOf(getUsed());

    case COMMITTED:
      return Long.valueOf(getCommitted());

    case MAX:
      return Long.valueOf(getMax());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INIT:
      return isSetInit();
    case USED:
      return isSetUsed();
    case COMMITTED:
      return isSetCommitted();
    case MAX:
      return isSetMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMemoryUsage)
      return this.equals((TMemoryUsage)that);
    return false;
  }

  public boolean equals(TMemoryUsage that) {
    if (that == null)
      return false;

    boolean this_present_init = true;
    boolean that_present_init = true;
    if (this_present_init || that_present_init) {
      if (!(this_present_init && that_present_init))
        return false;
      if (this.init != that.init)
        return false;
    }

    boolean this_present_used = true;
    boolean that_present_used = true;
    if (this_present_used || that_present_used) {
      if (!(this_present_used && that_present_used))
        return false;
      if (this.used != that.used)
        return false;
    }

    boolean this_present_committed = true;
    boolean that_present_committed = true;
    if (this_present_committed || that_present_committed) {
      if (!(this_present_committed && that_present_committed))
        return false;
      if (this.committed != that.committed)
        return false;
    }

    boolean this_present_max = true;
    boolean that_present_max = true;
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_init = true;
    list.add(present_init);
    if (present_init)
      list.add(init);

    boolean present_used = true;
    list.add(present_used);
    if (present_used)
      list.add(used);

    boolean present_committed = true;
    list.add(present_committed);
    if (present_committed)
      list.add(committed);

    boolean present_max = true;
    list.add(present_max);
    if (present_max)
      list.add(max);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMemoryUsage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInit()).compareTo(other.isSetInit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.init, other.init);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed()).compareTo(other.isSetUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used, other.used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitted()).compareTo(other.isSetCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committed, other.committed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMemoryUsage(");
    boolean first = true;

    sb.append("init:");
    sb.append(this.init);
    first = false;
    if (!first) sb.append(", ");
    sb.append("used:");
    sb.append(this.used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("committed:");
    sb.append(this.committed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    sb.append(this.max);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMemoryUsageStandardSchemeFactory implements SchemeFactory {
    public TMemoryUsageStandardScheme getScheme() {
      return new TMemoryUsageStandardScheme();
    }
  }

  private static class TMemoryUsageStandardScheme extends StandardScheme<TMemoryUsage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMemoryUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.init = iprot.readI64();
              struct.setInitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.used = iprot.readI64();
              struct.setUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.committed = iprot.readI64();
              struct.setCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max = iprot.readI64();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMemoryUsage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INIT_FIELD_DESC);
      oprot.writeI64(struct.init);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USED_FIELD_DESC);
      oprot.writeI64(struct.used);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.committed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeI64(struct.max);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMemoryUsageTupleSchemeFactory implements SchemeFactory {
    public TMemoryUsageTupleScheme getScheme() {
      return new TMemoryUsageTupleScheme();
    }
  }

  private static class TMemoryUsageTupleScheme extends TupleScheme<TMemoryUsage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMemoryUsage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInit()) {
        optionals.set(0);
      }
      if (struct.isSetUsed()) {
        optionals.set(1);
      }
      if (struct.isSetCommitted()) {
        optionals.set(2);
      }
      if (struct.isSetMax()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInit()) {
        oprot.writeI64(struct.init);
      }
      if (struct.isSetUsed()) {
        oprot.writeI64(struct.used);
      }
      if (struct.isSetCommitted()) {
        oprot.writeI64(struct.committed);
      }
      if (struct.isSetMax()) {
        oprot.writeI64(struct.max);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMemoryUsage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.init = iprot.readI64();
        struct.setInitIsSet(true);
      }
      if (incoming.get(1)) {
        struct.used = iprot.readI64();
        struct.setUsedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.committed = iprot.readI64();
        struct.setCommittedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.max = iprot.readI64();
        struct.setMaxIsSet(true);
      }
    }
  }

}

